generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(colaborador)
  image         String?

  // ‚úÖ NUEVOS CAMPOS PARA M√âTRICAS COMERCIALES
  metaMensual        Float? // Meta mensual de ventas
  metaTrimestral     Float? // Meta trimestral de ventas
  accounts           Account[]
  cotizaciones       Cotizacion[]
  listaEquipos       ListaEquipo[]
  listaEquipoItems   ListaEquipoItem[]
  pedidoEquipos      PedidoEquipo[]
  pedidoEquipoItems  PedidoEquipoItem[]
  proyectosComercial Proyecto[]                 @relation("ComercialProyecto")
  proyectosGestor    Proyecto[]                 @relation("GestorProyecto")
  ProyectoEquipos    ProyectoEquipoCotizado[]
  ProyectoServicios  ProyectoServicioCotizado[]
  registrosHoras     RegistroHoras[]
  sessions           Session[]

  // üìã Relaciones con sistema de tareas
  tareasResponsable   Tarea[]             @relation("TareaResponsable")
  subtareasAsignadas  Subtarea[]          @relation("SubtareaAsignado")
  asignacionesRecurso AsignacionRecurso[] @relation("AsignacionRecurso")
  registrosProgreso   RegistroProgreso[]  @relation("RegistroProgreso")

  // Nueva relaci√≥n con EDT
  proyectoEdtsResponsable ProyectoEdt[] @relation("EdtResponsable")

  // ‚úÖ Nueva relaci√≥n con cronograma comercial
  cotizacionEdtsResponsable   CotizacionEdt[]   @relation("CotizacionEdtResponsable")
  cotizacionTareasResponsable CotizacionTarea[] @relation("CotizacionTareaResponsable")

  // ‚úÖ NUEVA: Relaciones con ProyectoTarea
  proyectoTareasResponsable  ProyectoTarea[]    @relation("ProyectoTareaResponsable")
  proyectoSubtareasAsignadas ProyectoSubtarea[] @relation("ProyectoSubtareaAsignado")

  // ‚úÖ NUEVAS RELACIONES PARA CRM
  oportunidadesComercial        CrmOportunidad[]      @relation("CrmOportunidadComercial")
  oportunidadesResponsable      CrmOportunidad[]      @relation("CrmOportunidadResponsable")
  actividadesCrm                CrmActividad[]
  metricasComerciales           CrmMetricaComercial[]
  metricasComercialesDetalladas MetricaComercial[]

  // ‚úÖ NUEVA RELACI√ìN PARA VERSIONES DE COTIZACI√ìN
  versionesCotizacion CotizacionVersion[]

  // ‚úÖ NUEVA RELACI√ìN PARA NOTIFICACIONES
  notificaciones Notificacion[]

  // ‚úÖ NUEVA RELACI√ìN PARA AUDITOR√çA
  auditLogs AuditLog[]

  // ‚úÖ NUEVA RELACI√ìN PARA IMPORTACIONES DE PLANTILLAS
  importacionesPlantillas CotizacionPlantillaImport[]

  // ‚úÖ NUEVAS RELACIONES PARA PERMISOS
  userPermissions UserPermission[]

  // Relaciones Log√≠stica y Finanzas eliminadas
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cliente {
  id              String   @id @default(cuid())
  codigo          String   @unique // ‚úÖ C√≥digo del cliente (ej: CJM, ABC, etc.)
  numeroSecuencia Int?     @default(1) // ‚úÖ N√∫mero secuencial para c√≥digos de proyecto
  nombre          String
  ruc             String?
  direccion       String?
  telefono        String?
  correo          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // ‚úÖ NUEVOS CAMPOS PARA CRM
  sector           String? // "miner√≠a", "manufactura", "energ√≠a", "construcci√≥n"
  tamanoEmpresa    String? // "peque√±a", "mediana", "grande", "multinacional"
  sitioWeb         String?
  linkedin         String?
  potencialAnual   Float? // Valor estimado de proyectos por a√±o
  frecuenciaCompra String? // "muy_alta", "alta", "media", "baja"
  ultimoProyecto   DateTime?
  estadoRelacion   String    @default("prospecto") // prospecto, cliente_activo, cliente_inactivo
  calificacion     Int?      @default(3) // 1-5

  // ‚úÖ NUEVOS CAMPOS PARA M√âTRICAS DE CLIENTES
  frecuenciaCompraMeses    Int? // Frecuencia promedio entre proyectos (meses)
  calificacionSatisfaccion Int? @default(3) // 1-5 escala de satisfacci√≥n

  // Relaciones existentes
  cotizaciones Cotizacion[]
  proyectos    Proyecto[]

  // ‚úÖ NUEVAS RELACIONES PARA CRM
  oportunidades      CrmOportunidad[]
  contactos          CrmContactoCliente[]
  historialProyectos CrmHistorialProyecto[]
}

model Unidad {
  id        String           @id @default(cuid())
  nombre    String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  equipos   CatalogoEquipo[]
}

model UnidadServicio {
  id                                   String                               @id @default(cuid())
  nombre                               String                               @unique
  createdAt                            DateTime                             @default(now())
  updatedAt                            DateTime                             @updatedAt
  servicios                            CatalogoServicio[]
  cotizacionServicioItems              CotizacionServicioItem[]
  plantillaServicioItems               PlantillaServicioItem[]
  plantillaServicioItemsIndependientes PlantillaServicioItemIndependiente[]
}

model CategoriaEquipo {
  id          String           @id @default(cuid())
  nombre      String           @unique
  descripcion String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  equipos     CatalogoEquipo[]
}

model CategoriaServicio {
  id          String             @id @default(cuid())
  nombre      String             @unique
  descripcion String? // ‚úÖ Campo descripci√≥n agregado
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  servicios   CatalogoServicio[]

  // Nuevas relaciones
  proyectoEdts      ProyectoEdt[]
  registrosHorasRef RegistroHoras[] @relation("RegistroHorasCategoria")

  // ‚úÖ Nueva relaci√≥n con cronograma comercial
  cotizacionEdts CotizacionEdt[]
}

model Recurso {
  id                                   String                               @id @default(cuid())
  nombre                               String                               @unique
  costoHora                            Float
  createdAt                            DateTime                             @default(now())
  updatedAt                            DateTime                             @updatedAt
  servicios                            CatalogoServicio[]
  cotizacionServicioItems              CotizacionServicioItem[]
  plantillaServicioItems               PlantillaServicioItem[]
  registrosHoras                       RegistroHoras[]
  plantillaServicioItemsIndependientes PlantillaServicioItemIndependiente[]
}

model CatalogoEquipo {
  id                                 String                             @id @default(cuid())
  categoriaId                        String
  unidadId                           String
  codigo                             String                             @unique
  descripcion                        String
  marca                              String
  precioInterno                      Float
  margen                             Float
  precioVenta                        Float
  estado                             String
  precioReal                         Float?
  fechaActualizacion                 DateTime?
  createdAt                          DateTime                           @default(now())
  updatedAt                          DateTime                           @updatedAt
  categoria                          CategoriaEquipo                    @relation(fields: [categoriaId], references: [id])
  unidad                             Unidad                             @relation(fields: [unidadId], references: [id])
  cotizacionEquipoItems              CotizacionEquipoItem[]
  plantillaEquipoItems               PlantillaEquipoItem[]
  proyectoEquipoItems                ProyectoEquipoCotizadoItem[]
  plantillaEquipoItemsIndependientes PlantillaEquipoItemIndependiente[]
}

model CatalogoServicio {
  id                                   String                               @id @default(cuid())
  categoriaId                          String
  unidadServicioId                     String
  recursoId                            String
  nombre                               String
  descripcion                          String
  formula                              String
  horaBase                             Float?
  horaRepetido                         Float?
  horaUnidad                           Float?
  horaFijo                             Float?
  orden                                Int?                                 @default(0)
  createdAt                            DateTime                             @default(now())
  updatedAt                            DateTime                             @updatedAt
  categoria                            CategoriaServicio                    @relation(fields: [categoriaId], references: [id])
  recurso                              Recurso                              @relation(fields: [recursoId], references: [id])
  unidadServicio                       UnidadServicio                       @relation(fields: [unidadServicioId], references: [id])
  cotizacionServicioItems              CotizacionServicioItem[]
  plantillaItems                       PlantillaServicioItem[]
  proyectoServicioItems                ProyectoServicioCotizadoItem[]
  plantillaServicioItemsIndependientes PlantillaServicioItemIndependiente[]
}

model Plantilla {
  id                    String                      @id @default(cuid())
  nombre                String
  estado                String                      @default("borrador")
  tipo                  PlantillaTipo               @default(completa) // ‚úÖ Nuevo campo para tipo de plantilla
  totalEquiposInterno   Float                       @default(0)
  totalEquiposCliente   Float                       @default(0)
  totalServiciosInterno Float                       @default(0)
  totalServiciosCliente Float                       @default(0)
  totalGastosInterno    Float                       @default(0)
  totalGastosCliente    Float                       @default(0)
  totalInterno          Float                       @default(0)
  totalCliente          Float                       @default(0)
  descuento             Float                       @default(0)
  grandTotal            Float                       @default(0)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  cotizaciones          Cotizacion[]
  equipos               PlantillaEquipo[]
  gastos                PlantillaGasto[]
  servicios             PlantillaServicio[]
  importaciones         CotizacionPlantillaImport[] // ‚úÖ Nueva relaci√≥n con historial de importaciones
}

model PlantillaEquipo {
  id              String                @id @default(cuid())
  plantillaId     String
  nombre          String
  descripcion     String?
  subtotalInterno Float
  subtotalCliente Float
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  plantilla       Plantilla             @relation(fields: [plantillaId], references: [id], onDelete: Cascade)
  items           PlantillaEquipoItem[]
}

model PlantillaEquipoItem {
  id                String          @id @default(cuid())
  plantillaEquipoId String
  catalogoEquipoId  String?
  codigo            String
  descripcion       String
  categoria         String
  unidad            String
  marca             String
  precioInterno     Float
  precioCliente     Float
  cantidad          Float
  costoInterno      Float
  costoCliente      Float
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  catalogoEquipo    CatalogoEquipo? @relation(fields: [catalogoEquipoId], references: [id])
  plantillaEquipo   PlantillaEquipo @relation(fields: [plantillaEquipoId], references: [id], onDelete: Cascade)
}

model PlantillaServicio {
  id              String                  @id @default(cuid())
  plantillaId     String
  nombre          String
  categoria       String
  descripcion     String?
  subtotalInterno Float
  subtotalCliente Float
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  plantilla       Plantilla               @relation(fields: [plantillaId], references: [id], onDelete: Cascade)
  items           PlantillaServicioItem[]
}

model PlantillaServicioItem {
  id                   String            @id @default(cuid())
  plantillaServicioId  String
  catalogoServicioId   String?
  unidadServicioId     String
  recursoId            String
  nombre               String
  descripcion          String
  categoria            String
  unidadServicioNombre String
  recursoNombre        String
  formula              String
  horaBase             Float?
  horaRepetido         Float?
  horaUnidad           Float?
  horaFijo             Float?
  costoHora            Float
  cantidad             Int
  horaTotal            Float
  factorSeguridad      Float
  margen               Float
  costoInterno         Float
  costoCliente         Float
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  catalogoServicio     CatalogoServicio? @relation(fields: [catalogoServicioId], references: [id])
  plantillaServicio    PlantillaServicio @relation(fields: [plantillaServicioId], references: [id], onDelete: Cascade)
  recurso              Recurso           @relation(fields: [recursoId], references: [id])
  unidadServicio       UnidadServicio    @relation(fields: [unidadServicioId], references: [id])
}

model PlantillaGasto {
  id              String               @id @default(cuid())
  plantillaId     String
  nombre          String
  descripcion     String?
  subtotalInterno Float
  subtotalCliente Float
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  plantilla       Plantilla            @relation(fields: [plantillaId], references: [id], onDelete: Cascade)
  items           PlantillaGastoItem[]
}

model PlantillaGastoItem {
  id              String         @id @default(cuid())
  gastoId         String
  nombre          String
  descripcion     String?
  cantidad        Float
  precioUnitario  Float
  factorSeguridad Float          @default(1.0)
  margen          Float          @default(1.0)
  costoInterno    Float
  costoCliente    Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  gasto           PlantillaGasto @relation(fields: [gastoId], references: [id], onDelete: Cascade)
}

// ‚úÖ NUEVO: Plantillas independientes de equipos
model PlantillaEquipoIndependiente {
  id           String   @id @default(cuid())
  nombre       String
  descripcion  String?
  estado       String   @default("borrador")
  totalInterno Float    @default(0)
  totalCliente Float    @default(0)
  descuento    Float    @default(0)
  grandTotal   Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  items PlantillaEquipoItemIndependiente[]

  @@map("plantilla_equipo_independiente")
}

// ‚úÖ NUEVO: Items de plantillas de equipos independientes
model PlantillaEquipoItemIndependiente {
  id                String   @id @default(cuid())
  plantillaEquipoId String
  catalogoEquipoId  String?
  codigo            String
  descripcion       String
  categoria         String
  unidad            String
  marca             String
  precioInterno     Float
  precioCliente     Float
  cantidad          Float
  costoInterno      Float
  costoCliente      Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relaciones
  catalogoEquipo  CatalogoEquipo?              @relation(fields: [catalogoEquipoId], references: [id])
  plantillaEquipo PlantillaEquipoIndependiente @relation(fields: [plantillaEquipoId], references: [id], onDelete: Cascade)

  @@map("plantilla_equipo_item_independiente")
}

// ‚úÖ NUEVO: Plantillas independientes de servicios
model PlantillaServicioIndependiente {
  id           String   @id @default(cuid())
  nombre       String
  descripcion  String?
  categoria    String
  estado       String   @default("borrador")
  totalInterno Float    @default(0)
  totalCliente Float    @default(0)
  descuento    Float    @default(0)
  grandTotal   Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  items PlantillaServicioItemIndependiente[]

  @@map("plantilla_servicio_independiente")
}

// ‚úÖ NUEVO: Items de plantillas de servicios independientes
model PlantillaServicioItemIndependiente {
  id                   String   @id @default(cuid())
  plantillaServicioId  String
  catalogoServicioId   String?
  unidadServicioId     String
  recursoId            String
  nombre               String
  descripcion          String
  categoria            String
  unidadServicioNombre String
  recursoNombre        String
  formula              String
  horaBase             Float?
  horaRepetido         Float?
  horaUnidad           Float?
  horaFijo             Float?
  costoHora            Float
  cantidad             Int
  horaTotal            Float
  factorSeguridad      Float
  margen               Float
  costoInterno         Float
  costoCliente         Float
  orden                Int?     @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relaciones
  catalogoServicio  CatalogoServicio?              @relation(fields: [catalogoServicioId], references: [id])
  plantillaServicio PlantillaServicioIndependiente @relation(fields: [plantillaServicioId], references: [id], onDelete: Cascade)
  recurso           Recurso                        @relation(fields: [recursoId], references: [id])
  unidadServicio    UnidadServicio                 @relation(fields: [unidadServicioId], references: [id])

  @@map("plantilla_servicio_item_independiente")
}

// ‚úÖ NUEVO: Plantillas independientes de gastos
model PlantillaGastoIndependiente {
  id           String   @id @default(cuid())
  nombre       String
  descripcion  String?
  estado       String   @default("borrador")
  totalInterno Float    @default(0)
  totalCliente Float    @default(0)
  descuento    Float    @default(0)
  grandTotal   Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  items PlantillaGastoItemIndependiente[]

  @@map("plantilla_gasto_independiente")
}

// ‚úÖ NUEVO: Items de plantillas de gastos independientes
model PlantillaGastoItemIndependiente {
  id               String   @id @default(cuid())
  plantillaGastoId String
  nombre           String
  descripcion      String?
  cantidad         Float
  precioUnitario   Float
  factorSeguridad  Float    @default(1.0)
  margen           Float    @default(1.0)
  costoInterno     Float
  costoCliente     Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relaciones
  plantillaGasto PlantillaGastoIndependiente @relation(fields: [plantillaGastoId], references: [id], onDelete: Cascade)

  @@map("plantilla_gasto_item_independiente")
}

model Cotizacion {
  id                    String           @id @default(cuid())
  clienteId             String?
  comercialId           String?
  plantillaId           String?
  codigo                String           @unique // ‚úÖ C√≥digo autom√°tico formato GYS-XXXX-YY
  numeroSecuencia       Int // ‚úÖ N√∫mero correlativo para generaci√≥n de c√≥digo
  nombre                String
  totalEquiposInterno   Float            @default(0)
  totalEquiposCliente   Float            @default(0)
  totalServiciosInterno Float            @default(0)
  totalServiciosCliente Float            @default(0)
  totalGastosInterno    Float            @default(0)
  totalGastosCliente    Float            @default(0)
  totalInterno          Float            @default(0)
  totalCliente          Float            @default(0)
  descuento             Float            @default(0)
  grandTotal            Float            @default(0)
  prioridad             String?
  probabilidad          Int?
  fechaEnvio            DateTime?
  fechaCierreEstimada   DateTime?
  notas                 String?
  estado                EstadoCotizacion @default(borrador) // Estado del ciclo de vida de la cotizaci√≥n
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  // ‚úÖ Nuevos campos para cabecera comercial
  referencia        String?
  formaPago         String?
  validezOferta     Int?      @default(15) // d√≠as
  fechaValidezHasta DateTime?
  moneda            String?   @default("USD")
  revision          String?   @default("R01")
  incluyeIGV        Boolean?  @default(false)

  // ‚úÖ NUEVOS CAMPOS PARA CRM
  prioridadCrm             String?   @default("media") // baja, media, alta, critica
  probabilidadCierre       Int?      @default(0) // 0-100
  fechaUltimoContacto      DateTime?
  fechaProximaAccion       DateTime?
  proximaAccion            String?
  competencia              String? // Competidores identificados
  posicionVsCompetencia    String? // "lider", "segundo", "tercero", "desconocido"
  razonCierre              String? // Raz√≥n de p√©rdida/ganancia
  retroalimentacionCliente String?

  cliente   Cliente?             @relation(fields: [clienteId], references: [id])
  comercial User?                @relation(fields: [comercialId], references: [id])
  plantilla Plantilla?           @relation(fields: [plantillaId], references: [id])
  equipos   CotizacionEquipo[]
  gastos    CotizacionGasto[]
  servicios CotizacionServicio[]
  proyectos Proyecto[]

  // ‚úÖ Nueva relaci√≥n con cronograma comercial
  cronograma CotizacionEdt[]

  // ‚úÖ Nueva relaci√≥n con fases de cotizaci√≥n
  fases CotizacionFase[]

  // ‚úÖ Nuevas relaciones para exclusiones y condiciones
  exclusiones CotizacionExclusion[]
  condiciones CotizacionCondicion[]

  // ‚úÖ NUEVAS RELACIONES PARA CRM
  oportunidadCrm     CrmOportunidad?
  competidoresCrm    CrmCompetidorLicitacion[]
  historialProyectos CrmHistorialProyecto[]

  // ‚úÖ NUEVA RELACI√ìN PARA VERSIONES
  versiones CotizacionVersion[]

  // ‚úÖ NUEVA RELACI√ìN PARA IMPORTACIONES DE PLANTILLAS
  importacionesPlantillas CotizacionPlantillaImport[]
}

model CotizacionEquipo {
  id                  String                 @id @default(cuid())
  cotizacionId        String
  nombre              String
  descripcion         String?
  subtotalInterno     Float
  subtotalCliente     Float
  plazoEntregaSemanas Int? // ‚úÖ Tiempo de entrega en semanas
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  cotizacion          Cotizacion             @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  items               CotizacionEquipoItem[]
}

model CotizacionEquipoItem {
  id                 String           @id @default(cuid())
  cotizacionEquipoId String
  catalogoEquipoId   String?
  codigo             String
  descripcion        String
  categoria          String
  unidad             String
  marca              String
  precioInterno      Float
  precioCliente      Float
  cantidad           Float
  costoInterno       Float
  costoCliente       Float
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  catalogoEquipo     CatalogoEquipo?  @relation(fields: [catalogoEquipoId], references: [id])
  cotizacionEquipo   CotizacionEquipo @relation(fields: [cotizacionEquipoId], references: [id], onDelete: Cascade)
}

model CotizacionServicio {
  id                  String                   @id @default(cuid())
  cotizacionId        String
  nombre              String
  categoria           String
  subtotalInterno     Float
  subtotalCliente     Float
  plazoEntregaSemanas Int? // ‚úÖ Tiempo de entrega en semanas
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  cotizacion          Cotizacion               @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  items               CotizacionServicioItem[]

  // ‚úÖ Nueva relaci√≥n con EDTs
  edts CotizacionEdt[]
}

model CotizacionServicioItem {
  id                   String             @id @default(cuid())
  cotizacionServicioId String
  catalogoServicioId   String?
  unidadServicioId     String
  recursoId            String
  nombre               String
  descripcion          String
  categoria            String
  unidadServicioNombre String
  recursoNombre        String
  formula              String
  horaBase             Float?
  horaRepetido         Float?
  horaUnidad           Float?
  horaFijo             Float?
  costoHora            Float
  cantidad             Int
  horaTotal            Float
  factorSeguridad      Float
  margen               Float
  costoInterno         Float
  costoCliente         Float
  orden                Int?               @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  catalogoServicio     CatalogoServicio?  @relation(fields: [catalogoServicioId], references: [id])
  cotizacionServicio   CotizacionServicio @relation(fields: [cotizacionServicioId], references: [id], onDelete: Cascade)
  recurso              Recurso            @relation(fields: [recursoId], references: [id])
  unidadServicio       UnidadServicio     @relation(fields: [unidadServicioId], references: [id])

  // ‚úÖ Nueva relaci√≥n con tareas comerciales
  cotizacionTareas CotizacionTarea[]
}

model CotizacionGasto {
  id                  String                @id @default(cuid())
  cotizacionId        String
  nombre              String
  descripcion         String?
  subtotalInterno     Float
  subtotalCliente     Float
  plazoEntregaSemanas Int? // ‚úÖ Tiempo de entrega en semanas
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  cotizacion          Cotizacion            @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  items               CotizacionGastoItem[]
}

model CotizacionGastoItem {
  id              String          @id @default(cuid())
  gastoId         String
  nombre          String
  descripcion     String?
  cantidad        Float
  precioUnitario  Float
  factorSeguridad Float           @default(1.0)
  margen          Float           @default(1.0)
  costoInterno    Float
  costoCliente    Float
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  gasto           CotizacionGasto @relation(fields: [gastoId], references: [id], onDelete: Cascade)
}

// ‚úÖ Nuevo modelo CotizacionFase para jerarqu√≠a de 4 niveles en cotizaciones
model CotizacionFase {
  id           String  @id @default(cuid())
  cotizacionId String
  nombre       String // "Planificaci√≥n", "Ejecuci√≥n", "Cierre", etc.
  descripcion  String?
  orden        Int     @default(0) // Para ordenar fases

  // Fechas de la fase
  fechaInicioPlan DateTime?
  fechaFinPlan    DateTime?

  // Estado y progreso
  estado           EstadoFase @default(planificado)
  porcentajeAvance Int        @default(0)

  // Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  cotizacion Cotizacion      @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  edts       CotizacionEdt[]

  @@unique([cotizacionId, nombre])
  @@index([cotizacionId, orden])
  @@map("cotizacion_fase")
}

// ‚úÖ Nuevo modelo CotizacionEdt para cronograma comercial
model CotizacionEdt {
  id                   String @id @default(cuid())
  cotizacionId         String
  cotizacionServicioId String // Nueva referencia directa al servicio

  // Nueva relaci√≥n con fase
  cotizacionFaseId String?

  // Nombre descriptivo del EDT
  nombre String

  // Mantener compatibilidad con categor√≠a (opcional)
  categoriaServicioId String?

  // Zona espec√≠fica (ej. "Z1", "Planta", "Oficina")
  zona String?

  // Fechas comerciales (estimadas por comercial)
  fechaInicioComercial DateTime?
  fechaFinComercial    DateTime?

  // Horas estimadas comerciales
  horasEstimadas Decimal? @default(0) @db.Decimal(10, 2)

  // Estado del EDT comercial
  estado EstadoEdt @default(planificado)

  // Campos adicionales
  responsableId String?
  descripcion   String?
  prioridad     PrioridadEdt @default(media)

  // Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  cotizacion         Cotizacion         @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  cotizacionServicio CotizacionServicio @relation(fields: [cotizacionServicioId], references: [id])
  cotizacionFase     CotizacionFase?    @relation(fields: [cotizacionFaseId], references: [id], onDelete: SetNull)
  categoriaServicio  CategoriaServicio? @relation(fields: [categoriaServicioId], references: [id])
  responsable        User?              @relation("CotizacionEdtResponsable", fields: [responsableId], references: [id], onDelete: SetNull)

  // Relaci√≥n con tareas del EDT
  tareas CotizacionTarea[]

  @@unique([cotizacionId, cotizacionServicioId, zona])
  @@index([cotizacionId, cotizacionServicioId, zona])
  @@index([estado, fechaFinComercial])
  @@index([responsableId, estado])
  @@map("cotizacion_edt")
}

// ‚úÖ Nuevo modelo CotizacionTarea para tareas del cronograma comercial
model CotizacionTarea {
  id              String @id @default(cuid())
  cotizacionEdtId String

  // Informaci√≥n b√°sica de la tarea
  nombre      String
  descripcion String?

  // Fechas comerciales
  fechaInicio DateTime
  fechaFin    DateTime

  // Horas estimadas
  horasEstimadas Decimal? @db.Decimal(10, 2)

  // Estado y prioridad
  estado    EstadoTarea    @default(pendiente)
  prioridad PrioridadTarea @default(media)

  // Orden personalizado definido por usuario (drag & drop)
  orden Int @default(0)

  // Dependencias (opcional)
  dependenciaId String?

  // Responsable asignado
  responsableId String?

  // ‚úÖ Nueva relaci√≥n opcional con √≠tem de servicio
  cotizacionServicioItemId String?

  // Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  cotizacionEdt CotizacionEdt    @relation(fields: [cotizacionEdtId], references: [id], onDelete: Cascade)
  dependencia   CotizacionTarea? @relation("CotizacionTareaDependencia", fields: [dependenciaId], references: [id], onDelete: SetNull)

  // Tareas que dependen de esta
  tareasDependientes CotizacionTarea[] @relation("CotizacionTareaDependencia")

  // Usuario responsable
  responsable User? @relation("CotizacionTareaResponsable", fields: [responsableId], references: [id], onDelete: SetNull)

  // ‚úÖ Nueva relaci√≥n con √≠tem de servicio
  cotizacionServicioItem CotizacionServicioItem? @relation(fields: [cotizacionServicioItemId], references: [id], onDelete: SetNull)

  @@index([cotizacionEdtId, estado])
  @@index([responsableId, fechaFin])
  @@index([dependenciaId])
  @@index([cotizacionServicioItemId]) // ‚úÖ Nuevo √≠ndice
  @@map("cotizacion_tarea")
}

model Proyecto {
  id                    String                     @id @default(cuid())
  clienteId             String
  comercialId           String
  gestorId              String
  cotizacionId          String?
  nombre                String
  totalEquiposInterno   Float                      @default(0)
  totalServiciosInterno Float                      @default(0)
  totalGastosInterno    Float                      @default(0)
  totalInterno          Float                      @default(0)
  totalCliente          Float                      @default(0)
  descuento             Float                      @default(0)
  grandTotal            Float                      @default(0)
  codigo                String
  estado                ProyectoEstado             @default(en_ejecucion)
  fechaInicio           DateTime
  fechaFin              DateTime?
  totalRealEquipos      Float                      @default(0)
  totalRealServicios    Float                      @default(0)
  totalRealGastos       Float                      @default(0)
  totalReal             Float                      @default(0)
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  cotizacionesProveedor CotizacionProveedor[]
  listaEquipos          ListaEquipo[]
  pedidos               PedidoEquipo[]
  cliente               Cliente                    @relation(fields: [clienteId], references: [id])
  comercial             User                       @relation("ComercialProyecto", fields: [comercialId], references: [id])
  cotizacion            Cotizacion?                @relation(fields: [cotizacionId], references: [id])
  gestor                User                       @relation("GestorProyecto", fields: [gestorId], references: [id])
  equipos               ProyectoEquipoCotizado[]
  gastos                ProyectoGastoCotizado[]
  servicios             ProyectoServicioCotizado[]
  registrosHoras        RegistroHoras[]
  valorizaciones        Valorizacion[]

  // Nueva relaci√≥n con EDT
  proyectoEdts ProyectoEdt[]

  // ‚úÖ Nueva relaci√≥n con fases
  fases ProyectoFase[]

  // ‚úÖ Nueva relaci√≥n con cronogramas
  cronogramas ProyectoCronograma[]

  // ‚úÖ NUEVA RELACI√ìN PARA CRM
  historialProyectos CrmHistorialProyecto[]
  oportunidadesCrm   CrmOportunidad[]

  // ‚úÖ √çndices compuestos para optimizar queries frecuentes
  @@index([estado, fechaInicio, createdAt(sort: Desc)], name: "idx_proyecto_estado_inicio_fecha")
  @@index([comercialId, estado, fechaInicio], name: "idx_proyecto_comercial_estado_inicio")
  @@index([gestorId, estado, fechaFin], name: "idx_proyecto_gestor_estado_fin")
  @@index([clienteId, estado, createdAt(sort: Desc)], name: "idx_proyecto_cliente_estado_fecha")
}

// ‚úÖ Nuevo modelo ProyectoFase para jerarqu√≠a de 4 niveles
model ProyectoFase {
  id                   String  @id @default(cuid())
  proyectoId           String
  proyectoCronogramaId String // ‚úÖ Referencia al tipo de cronograma
  nombre               String // "Planificaci√≥n", "Ejecuci√≥n", "Cierre", etc.
  descripcion          String?
  orden                Int     @default(0) // Para ordenar fases

  // Fechas de la fase
  fechaInicioPlan DateTime?
  fechaFinPlan    DateTime?
  fechaInicioReal DateTime?
  fechaFinReal    DateTime?

  // Estado y progreso
  estado           EstadoFase @default(planificado)
  porcentajeAvance Int        @default(0)

  // Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  proyecto           Proyecto           @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  proyectoCronograma ProyectoCronograma @relation(fields: [proyectoCronogramaId], references: [id], onDelete: Cascade)
  edts               ProyectoEdt[]

  @@unique([proyectoId, proyectoCronogramaId, nombre])
  @@index([proyectoId, proyectoCronogramaId, orden])
  @@map("proyecto_fase")
}

// ‚úÖ Nuevo modelo FaseDefault para configuraci√≥n global de fases
model FaseDefault {
  id          String  @id @default(cuid())
  nombre      String // "Planificaci√≥n", "Ejecuci√≥n", "Cierre", etc.
  descripcion String?
  orden       Int     @default(0) // Para ordenar fases
  activo      Boolean @default(true) // Para activar/desactivar fases

  // Configuraci√≥n de duraci√≥n (porcentaje del proyecto total)
  porcentajeDuracion Float? // ej. 0.2 para 20% del tiempo total
  color              String? // Color para visualizaci√≥n en Gantt

  // Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nombre])
  @@index([orden])
  @@index([activo])
  @@map("fase_default")
}

// ‚úÖ Nuevo modelo ProyectoCronograma para controlar tipos de cronograma
model ProyectoCronograma {
  id         String @id @default(cuid())
  proyectoId String
  tipo       String // 'comercial', 'planificacion', 'ejecucion'
  nombre     String // Nombre descriptivo del tipo de cronograma

  // Para baseline comercial (copia de cotizaci√≥n)
  copiadoDesdeCotizacionId String? @unique

  // Control de versiones y estado
  esBaseline Boolean @default(false) // Si es inmutable (baseline)
  version    Int     @default(1) // Para futuras versiones

  // Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  proyecto Proyecto        @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  fases    ProyectoFase[]
  edts     ProyectoEdt[]
  tareas   ProyectoTarea[]

  @@unique([proyectoId, tipo])
  @@index([proyectoId, tipo])
  @@map("proyecto_cronograma")
}

// ‚úÖ Nuevo modelo ProyectoEdt para cronograma
model ProyectoEdt {
  id                   String  @id @default(cuid())
  proyectoId           String
  proyectoCronogramaId String // ‚úÖ Referencia al tipo de cronograma
  nombre               String // Nombre descriptivo del EDT
  categoriaServicioId  String
  zona                 String? // ej. "Z1", "Planta"

  // Nueva relaci√≥n con fase
  proyectoFaseId String?
  proyectoFase   ProyectoFase? @relation(fields: [proyectoFaseId], references: [id], onDelete: SetNull)

  // Plan interno (ligero)
  fechaInicioPlan DateTime?
  fechaFinPlan    DateTime?
  horasPlan       Decimal?  @default(0) @db.Decimal(10, 2)

  // Real (agregado desde HH)
  fechaInicioReal DateTime?
  fechaFinReal    DateTime?
  horasReales     Decimal   @default(0) @db.Decimal(10, 2)

  // Estado operativo
  estado EstadoEdt @default(planificado)

  // Campos adicionales
  responsableId    String?
  porcentajeAvance Int          @default(0) // 0-100
  descripcion      String?
  prioridad        PrioridadEdt @default(media)

  // Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  proyecto           Proyecto           @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  proyectoCronograma ProyectoCronograma @relation(fields: [proyectoCronogramaId], references: [id], onDelete: Cascade)
  categoriaServicio  CategoriaServicio  @relation(fields: [categoriaServicioId], references: [id])
  responsable        User?              @relation("EdtResponsable", fields: [responsableId], references: [id], onDelete: SetNull)
  registrosHoras     RegistroHoras[]
  ProyectoTarea      ProyectoTarea[]

  @@unique([proyectoId, proyectoCronogramaId, categoriaServicioId, zona])
  @@index([proyectoId, proyectoCronogramaId, categoriaServicioId, zona])
  @@index([estado, fechaFinPlan])
  @@index([responsableId, estado])
  @@map("proyecto_edt")
}

// ‚úÖ NUEVO: Modelo para tareas de cronograma de proyecto (4 niveles)
model ProyectoTarea {
  id                   String @id @default(cuid())
  proyectoEdtId        String
  proyectoCronogramaId String // ‚úÖ Referencia al tipo de cronograma

  // Informaci√≥n b√°sica
  nombre      String
  descripcion String?

  // Fechas planificadas
  fechaInicio DateTime
  fechaFin    DateTime

  // Fechas reales
  fechaInicioReal DateTime?
  fechaFinReal    DateTime?

  // Horas (estimadas vs reales desde RegistroHoras)
  horasEstimadas Decimal? @db.Decimal(10, 2)
  horasReales    Decimal  @default(0) @db.Decimal(10, 2) // Calculado autom√°ticamente

  // Estado y prioridad
  estado               EstadoTarea    @default(pendiente)
  prioridad            PrioridadTarea @default(media)
  porcentajeCompletado Int            @default(0)

  // Dependencias
  dependenciaId String?

  // Asignaciones
  responsableId String?
  responsable   User?   @relation("ProyectoTareaResponsable", fields: [responsableId], references: [id], onDelete: SetNull)

  // ‚úÖ NUEVO: Registros de horas asociados
  registrosHoras RegistroHoras[]

  // Funcionalidades avanzadas
  subtareas               ProyectoSubtarea[]
  dependenciasOrigen      ProyectoDependenciaTarea[] @relation("ProyectoTareaOrigen")
  dependenciasDependiente ProyectoDependenciaTarea[] @relation("ProyectoTareaDependiente")

  // Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  proyectoEdt        ProyectoEdt        @relation(fields: [proyectoEdtId], references: [id], onDelete: Cascade)
  proyectoCronograma ProyectoCronograma @relation(fields: [proyectoCronogramaId], references: [id], onDelete: Cascade)
  dependencia        ProyectoTarea?     @relation("ProyectoTareaDependencia", fields: [dependenciaId], references: [id], onDelete: SetNull)
  tareasDependientes ProyectoTarea[]    @relation("ProyectoTareaDependencia")

  @@index([proyectoEdtId, estado])
  @@index([responsableId, fechaFin])
  @@index([dependenciaId])
  @@map("proyecto_tarea")
}

// ‚úÖ NUEVO: Modelo para subtareas de ProyectoTarea
model ProyectoSubtarea {
  id                   String      @id @default(cuid())
  nombre               String
  descripcion          String?
  fechaInicio          DateTime
  fechaFin             DateTime
  fechaInicioReal      DateTime?
  fechaFinReal         DateTime?
  estado               EstadoTarea @default(pendiente)
  porcentajeCompletado Int         @default(0)
  horasEstimadas       Decimal?    @db.Decimal(10, 2)
  horasReales          Decimal?    @default(0) @db.Decimal(10, 2)

  // Relaci√≥n con tarea padre
  proyectoTareaId String
  proyectoTarea   ProyectoTarea @relation(fields: [proyectoTareaId], references: [id], onDelete: Cascade)

  // Asignado
  asignadoId String?
  asignado   User?   @relation("ProyectoSubtareaAsignado", fields: [asignadoId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("proyecto_subtarea")
}

// ‚úÖ NUEVO: Modelo para dependencias entre ProyectoTarea
model ProyectoDependenciaTarea {
  id   String          @id @default(cuid())
  tipo TipoDependencia @default(finish_to_start)

  // Tarea origen (predecesora)
  tareaOrigenId String
  tareaOrigen   ProyectoTarea @relation("ProyectoTareaOrigen", fields: [tareaOrigenId], references: [id], onDelete: Cascade)

  // Tarea dependiente (sucesora)
  tareaDependienteId String
  tareaDependiente   ProyectoTarea @relation("ProyectoTareaDependiente", fields: [tareaDependienteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([tareaOrigenId, tareaDependienteId])
  @@map("proyecto_dependencias_tarea")
}

model ProyectoEquipoCotizado {
  id              String                       @id @default(cuid())
  proyectoId      String
  responsableId   String
  nombre          String
  descripcion     String?
  subtotalInterno Float
  subtotalCliente Float
  subtotalReal    Float                        @default(0)
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  listaItems      ListaEquipoItem[]
  proyecto        Proyecto                     @relation(fields: [proyectoId], references: [id])
  responsable     User                         @relation(fields: [responsableId], references: [id])
  items           ProyectoEquipoCotizadoItem[]
}

model ProyectoEquipoCotizadoItem {
  id                        String                 @id @default(cuid())
  proyectoEquipoId          String
  catalogoEquipoId          String?
  listaId                   String?
  codigo                    String
  descripcion               String
  categoria                 String                 @default("SIN-CATEGORIA")
  unidad                    String
  marca                     String                 @default("SIN-MARCA")
  precioInterno             Float
  precioCliente             Float
  cantidad                  Float
  costoInterno              Float
  costoCliente              Float
  precioReal                Float                  @default(0)
  cantidadReal              Float                  @default(0)
  costoReal                 Float                  @default(0)
  tiempoEntrega             Int?
  fechaEntregaEstimada      DateTime?
  estado                    EstadoEquipoItem       @default(pendiente)
  motivoCambio              String?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  listaEquipoSeleccionadoId String?
  listaEquipos              ListaEquipoItem[]
  reemplazadoPor            ListaEquipoItem[]      @relation("ReemplazoCotizado")
  catalogoEquipo            CatalogoEquipo?        @relation(fields: [catalogoEquipoId], references: [id])
  listaEquipoSeleccionado   ListaEquipoItem?       @relation("ListaSeleccionada", fields: [listaEquipoSeleccionadoId], references: [id])
  lista                     ListaEquipo?           @relation(fields: [listaId], references: [id])
  proyectoEquipo            ProyectoEquipoCotizado @relation(fields: [proyectoEquipoId], references: [id], onDelete: Cascade)
}

model ProyectoServicioCotizado {
  id              String                         @id @default(cuid())
  proyectoId      String
  responsableId   String
  nombre          String
  categoria       String
  subtotalInterno Float
  subtotalCliente Float
  subtotalReal    Float                          @default(0)
  createdAt       DateTime                       @default(now())
  updatedAt       DateTime                       @updatedAt
  proyecto        Proyecto                       @relation(fields: [proyectoId], references: [id])
  responsable     User                           @relation(fields: [responsableId], references: [id])
  items           ProyectoServicioCotizadoItem[]
  registrosHoras  RegistroHoras[]

  // üìã Relaci√≥n con sistema de tareas
  tareas Tarea[]
}

model ProyectoServicioCotizadoItem {
  id                 String                   @id @default(cuid())
  proyectoServicioId String
  catalogoServicioId String?
  categoria          String
  costoHoraInterno   Float
  costoHoraCliente   Float
  nombre             String
  cantidadHoras      Int
  costoInterno       Float
  costoCliente       Float
  costoReal          Float                    @default(0)
  horasEjecutadas    Float                    @default(0)
  motivoCambio       String?
  nuevo              Boolean                  @default(false)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  catalogoServicio   CatalogoServicio?        @relation(fields: [catalogoServicioId], references: [id])
  proyectoServicio   ProyectoServicioCotizado @relation(fields: [proyectoServicioId], references: [id])
}

model ProyectoGastoCotizado {
  id              String                      @id @default(cuid())
  proyectoId      String
  nombre          String
  descripcion     String?
  subtotalInterno Float
  subtotalCliente Float
  subtotalReal    Float                       @default(0)
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  proyecto        Proyecto                    @relation(fields: [proyectoId], references: [id])
  items           ProyectoGastoCotizadoItem[]
}

model ProyectoGastoCotizadoItem {
  id              String                @id @default(cuid())
  gastoId         String
  nombre          String
  descripcion     String?
  cantidad        Float
  precioUnitario  Float
  factorSeguridad Float
  margen          Float
  costoInterno    Float
  costoCliente    Float
  costoReal       Float                 @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  gasto           ProyectoGastoCotizado @relation(fields: [gastoId], references: [id])
}

model ListaEquipo {
  id                      String                       @id @default(cuid())
  proyectoId              String
  codigo                  String                       @unique
  nombre                  String
  numeroSecuencia         Int
  estado                  EstadoListaEquipo            @default(borrador)
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @updatedAt
  responsableId           String
  fechaAprobacionFinal    DateTime?
  fechaAprobacionRevision DateTime?
  fechaEnvioLogistica     DateTime?
  fechaEnvioRevision      DateTime?
  fechaFinCotizacion      DateTime?
  fechaInicioCotizacion   DateTime?
  fechaNecesaria          DateTime?
  fechaValidacion         DateTime?
  cotizaciones            CotizacionProveedorItem[]
  proyecto                Proyecto                     @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  responsable             User                         @relation(fields: [responsableId], references: [id])
  items                   ListaEquipoItem[]
  pedidoEquipos           PedidoEquipo[]
  pedidoEquipoItems       PedidoEquipoItem[]
  proyectoEquipoItems     ProyectoEquipoCotizadoItem[]

  // ‚úÖ √çndices compuestos para optimizar queries frecuentes
  @@index([proyectoId, estado, createdAt(sort: Desc)], name: "idx_lista_proyecto_estado_fecha")
  @@index([responsableId, estado, fechaAprobacionFinal], name: "idx_lista_responsable_estado_aprobacion")
  @@index([estado, fechaNecesaria, createdAt(sort: Desc)], name: "idx_lista_estado_necesaria_fecha")
}

model ListaEquipoItem {
  id                            String                       @id @default(cuid())
  listaId                       String
  proyectoEquipoId              String?
  proyectoEquipoItemId          String?
  proveedorId                   String?
  cotizacionSeleccionadaId      String?                      @unique
  codigo                        String
  descripcion                   String
  unidad                        String
  cantidad                      Float
  verificado                    Boolean                      @default(false)
  comentarioRevision            String?
  presupuesto                   Float?
  precioElegido                 Float?
  costoElegido                  Float?
  costoPedido                   Float?                       @default(0)
  costoReal                     Float?                       @default(0)
  cantidadPedida                Float?                       @default(0)
  cantidadEntregada             Float?                       @default(0)
  estado                        EstadoListaItem              @default(borrador)
  createdAt                     DateTime                     @default(now())
  updatedAt                     DateTime                     @updatedAt
  origen                        OrigenListaItem              @default(nuevo)
  reemplazaProyectoEquipoCotizadoItemId String?
  tiempoEntrega                 String?
  tiempoEntregaDias             Int?
  responsableId                 String
  cotizaciones                  CotizacionProveedorItem[]
  cotizacionSeleccionada        CotizacionProveedorItem?     @relation("SeleccionCotizacion", fields: [cotizacionSeleccionadaId], references: [id])
  lista                         ListaEquipo                  @relation(fields: [listaId], references: [id], onDelete: Cascade)
  proveedor                     Proveedor?                   @relation(fields: [proveedorId], references: [id])
  proyectoEquipo                ProyectoEquipoCotizado?      @relation(fields: [proyectoEquipoId], references: [id])
  proyectoEquipoItem            ProyectoEquipoCotizadoItem?  @relation(fields: [proyectoEquipoItemId], references: [id])
  reemplazaProyectoEquipoCotizadoItem   ProyectoEquipoCotizadoItem?  @relation("ReemplazoCotizado", fields: [reemplazaProyectoEquipoCotizadoItemId], references: [id])
  responsable                   User                         @relation(fields: [responsableId], references: [id])
  pedidos                       PedidoEquipoItem[]
  listaSeleccionadaDe           ProyectoEquipoCotizadoItem[] @relation("ListaSeleccionada")

  // ‚úÖ √çndices compuestos para optimizar queries frecuentes
  @@index([listaId, estado, createdAt(sort: Desc)], name: "idx_lista_item_lista_estado_fecha")
  @@index([responsableId, estado, verificado], name: "idx_lista_item_responsable_estado_verificado")
  @@index([proveedorId, estado, precioElegido], name: "idx_lista_item_proveedor_estado_precio")
}

model Proveedor {
  id           String                @id @default(cuid())
  nombre       String
  ruc          String?
  direccion    String?
  telefono     String?
  correo       String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  cotizaciones CotizacionProveedor[]
  listas       ListaEquipoItem[]
}

model CotizacionProveedor {
  id              String                    @id @default(cuid())
  proveedorId     String
  proyectoId      String
  codigo          String                    @unique
  numeroSecuencia Int
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  estado          EstadoCotizacionProveedor @default(pendiente)
  proveedor       Proveedor                 @relation(fields: [proveedorId], references: [id])
  proyecto        Proyecto                  @relation(fields: [proyectoId], references: [id])
  items           CotizacionProveedorItem[]
}

model CotizacionProveedorItem {
  id                String                    @id @default(cuid())
  cotizacionId      String
  listaEquipoItemId String?
  codigo            String
  descripcion       String
  unidad            String
  cantidadOriginal  Float
  precioUnitario    Float?
  cantidad          Float?
  costoTotal        Float?
  tiempoEntrega     String?
  tiempoEntregaDias Int?
  estado            EstadoCotizacionProveedor @default(pendiente)
  esSeleccionada    Boolean?                  @default(false)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  listaId           String?
  cotizacion        CotizacionProveedor       @relation(fields: [cotizacionId], references: [id])
  listaEquipoItem   ListaEquipoItem?          @relation(fields: [listaEquipoItemId], references: [id])
  lista             ListaEquipo?              @relation(fields: [listaId], references: [id])
  seleccionadaEn    ListaEquipoItem?          @relation("SeleccionCotizacion")
}

model PedidoEquipo {
  id                   String             @id @default(cuid())
  proyectoId           String
  responsableId        String
  listaId              String?
  codigo               String             @unique
  numeroSecuencia      Int
  estado               EstadoPedido       @default(borrador)
  fechaPedido          DateTime           @default(now())
  observacion          String?
  fechaEntregaEstimada DateTime?
  fechaEntregaReal     DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  fechaNecesaria       DateTime
  costoRealTotal       Float              @default(0)
  esUrgente            Boolean            @default(false)
  presupuestoTotal     Float              @default(0)
  prioridad            String?            @default("media")
  lista                ListaEquipo?       @relation(fields: [listaId], references: [id])
  proyecto             Proyecto           @relation(fields: [proyectoId], references: [id])
  responsable          User               @relation(fields: [responsableId], references: [id])
  items                PedidoEquipoItem[]

  // ‚úÖ √çndices compuestos para optimizar queries frecuentes
  @@index([proyectoId, estado, createdAt(sort: Desc)], name: "idx_pedido_proyecto_estado_fecha")
  @@index([responsableId, estado, fechaNecesaria], name: "idx_pedido_responsable_estado_fecha")
  @@index([estado, prioridad, createdAt(sort: Desc)], name: "idx_pedido_estado_prioridad_fecha")
  @@index([proyectoId, responsableId, estado], name: "idx_pedido_proyecto_responsable_estado")
}

model PedidoEquipoItem {
  id                          String           @id @default(cuid())
  pedidoId                    String
  listaEquipoItemId           String?
  cantidadPedida              Float
  precioUnitario              Float?
  costoTotal                  Float?
  estado                      EstadoPedidoItem @default(pendiente)
  cantidadAtendida            Float?
  comentarioLogistica         String?
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  listaId                     String?
  codigo                      String
  descripcion                 String
  tiempoEntrega               String?
  tiempoEntregaDias           Int?
  unidad                      String
  fechaOrdenCompraRecomendada DateTime?
  responsableId               String

  // üÜï Campos para trazabilidad de entregas parciales
  fechaEntregaEstimada DateTime? // Fecha estimada de entrega del item
  fechaEntregaReal     DateTime? // Fecha real de entrega del item
  estadoEntrega        EstadoEntregaItem @default(pendiente) // Estado granular de entrega
  observacionesEntrega String? // Comentarios sobre la entrega

  listaEquipoItem ListaEquipoItem? @relation(fields: [listaEquipoItemId], references: [id])
  lista           ListaEquipo?     @relation(fields: [listaId], references: [id])
  pedido          PedidoEquipo     @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  responsable     User             @relation(fields: [responsableId], references: [id])
}

model Valorizacion {
  id            String   @id @default(cuid())
  proyectoId    String
  nombre        String
  descripcion   String?
  periodoInicio DateTime
  periodoFin    DateTime
  estado        String   @default("pendiente")
  montoTotal    Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  proyecto      Proyecto @relation(fields: [proyectoId], references: [id])
}

model RegistroHoras {
  id                 String   @id @default(cuid())
  proyectoId         String
  proyectoServicioId String
  categoria          String
  nombreServicio     String
  recursoId          String
  recursoNombre      String
  usuarioId          String
  fechaTrabajo       DateTime
  horasTrabajadas    Float
  descripcion        String?
  observaciones      String?
  aprobado           Boolean  @default(false)

  // Nuevos campos
  proyectoEdtId       String?
  categoriaServicioId String?
  origen              OrigenTrabajo?
  ubicacion           String?

  // ‚úÖ NUEVO: Relaci√≥n con ProyectoTarea
  proyectoTareaId String?

  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  proyecto         Proyecto                 @relation(fields: [proyectoId], references: [id])
  proyectoServicio ProyectoServicioCotizado @relation(fields: [proyectoServicioId], references: [id])
  recurso          Recurso                  @relation(fields: [recursoId], references: [id])
  usuario          User                     @relation(fields: [usuarioId], references: [id])

  // Nuevas relaciones
  proyectoEdt          ProyectoEdt?       @relation(fields: [proyectoEdtId], references: [id], onDelete: SetNull)
  categoriaServicioRef CategoriaServicio? @relation("RegistroHorasCategoria", fields: [categoriaServicioId], references: [id], onDelete: SetNull)
  proyectoTarea        ProyectoTarea?     @relation(fields: [proyectoTareaId], references: [id], onDelete: SetNull)

  // Nuevos √≠ndices
  @@index([proyectoTareaId, fechaTrabajo])
  @@index([proyectoEdtId, proyectoTareaId, fechaTrabajo])
  @@index([categoriaServicioId, fechaTrabajo])
  @@index([origen, fechaTrabajo])
}

// Modelo OrdenCompra eliminado

// Modelo OrdenCompraItem eliminado

// Modelo Recepcion eliminado

// Modelo RecepcionItem eliminado

// Modelo Pago eliminado

// Modelo PagoItem eliminado

/// *
///  * Modelo Producto para el cat√°logo de productos/materiales
///  * Usado en OrdenCompraItem para referenciar productos espec√≠ficos
// ‚ùå Eliminado: model Producto - no forma parte del sistema GYS

enum EstadoEquipo {
  pendiente
  revisado_tecnico
  aprobado_coordinador
  aprobado_gestor
  en_lista
  comprado
  reemplazado
  entregado
}

enum EstadoEquipoItem {
  pendiente
  en_lista
  reemplazado
  descartado
}

enum EstadoListaItem {
  borrador
  por_revisar
  por_cotizar
  por_validar
  por_aprobar
  aprobado
  rechazado
}

enum OrigenListaItem {
  cotizado
  nuevo
  reemplazo
}

enum EstadoListaEquipo {
  borrador // Lista reci√©n creada, en edici√≥n
  enviada // Lista enviada para revisi√≥n t√©cnica
  por_revisar // Lista pendiente de revisi√≥n t√©cnica
  por_cotizar // Lista aprobada t√©cnicamente, pendiente de cotizaci√≥n
  por_validar // Cotizaciones recibidas, pendiente de validaci√≥n
  por_aprobar // Lista validada, pendiente de aprobaci√≥n final
  aprobada // Lista aprobada, puede crear pedidos
  rechazada // Lista rechazada, requiere correcciones
  completada // Lista completada, pedidos creados
}

enum EstadoPedido {
  borrador
  enviado
  atendido
  parcial
  entregado
  cancelado
}

enum EstadoPedidoItem {
  pendiente
  atendido
  parcial
  entregado
}

// üÜï Enum para trazabilidad de entregas a nivel de item
enum EstadoEntregaItem {
  pendiente
  en_proceso
  parcial
  entregado
  retrasado
  cancelado
}

enum EstadoCotizacionProveedor {
  pendiente
  solicitado
  cotizado
  rechazado
  seleccionado
}

enum Role {
  colaborador
  comercial
  presupuestos
  proyectos
  coordinador
  logistico
  gestor
  gerente
  admin
}

// ‚úÖ Nuevos enums para sistema de cronograma EDT
enum ProyectoEstado {
  creado // Proyecto reci√©n creado desde cotizaci√≥n
  listas_pendientes // Esperando creaci√≥n/aprobaci√≥n de listas
  listas_aprobadas // Listas aprobadas, listo para crear pedidos
  pedidos_creados // Pedidos parciales creados
  en_ejecucion // Proyecto en ejecuci√≥n activa
  completado // Proyecto terminado exitosamente
  pausado // Proyecto temporalmente pausado
  cancelado // Proyecto cancelado
  en_planificacion // Estado inicial para proyectos creados desde cotizaci√≥n
}

enum EstadoEdt {
  planificado
  en_progreso
  detenido
  completado
  cancelado
}

enum EstadoFase {
  planificado
  en_progreso
  completado
  pausado
  cancelado
}

enum PrioridadEdt {
  baja
  media
  alta
  critica
}

enum OrigenTrabajo {
  oficina
  campo
}

// ‚úÖ Nuevo enum para estados de oportunidad CRM
enum EstadoOportunidad {
  prospecto
  contacto_inicial
  propuesta_enviada
  negociacion
  cerrada_ganada
  cerrada_perdida
}

// ‚úÖ Nuevo enum para estados de cotizaci√≥n
enum EstadoCotizacion {
  borrador
  enviada
  aprobada
  rechazada
}

// ‚úÖ Enums para sistema de tareas y subtareas
enum EstadoTarea {
  pendiente
  en_progreso
  completada
  pausada
  cancelada
}

enum PrioridadTarea {
  baja
  media
  alta
  critica
}

enum TipoDependencia {
  finish_to_start
  start_to_start
  finish_to_finish
  start_to_finish
}

// üìã Modelo principal de Tarea
model Tarea {
  id                   String         @id @default(cuid())
  nombre               String
  descripcion          String?
  fechaInicio          DateTime
  fechaFin             DateTime
  fechaInicioReal      DateTime?
  fechaFinReal         DateTime?
  estado               EstadoTarea    @default(pendiente)
  prioridad            PrioridadTarea @default(media)
  porcentajeCompletado Int            @default(0)
  horasEstimadas       Decimal?       @db.Decimal(10, 2)
  horasReales          Decimal?       @default(0) @db.Decimal(10, 2)

  // üîó Relaciones
  proyectoServicioId String
  proyectoServicio   ProyectoServicioCotizado @relation(fields: [proyectoServicioId], references: [id], onDelete: Cascade)

  responsableId String?
  responsable   User?   @relation("TareaResponsable", fields: [responsableId], references: [id], onDelete: SetNull)

  // üìã Subtareas
  subtareas Subtarea[]

  // üîó Dependencias
  dependenciasOrigen      DependenciaTarea[] @relation("TareaOrigen")
  dependenciasDependiente DependenciaTarea[] @relation("TareaDependiente")

  // üë• Asignaciones de recursos
  asignaciones AsignacionRecurso[]

  // üìä Registros de progreso
  registrosProgreso RegistroProgreso[]

  // üìÖ Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tareas")
}

// üìã Modelo de Subtarea
model Subtarea {
  id                   String      @id @default(cuid())
  nombre               String
  descripcion          String?
  fechaInicio          DateTime
  fechaFin             DateTime
  fechaInicioReal      DateTime?
  fechaFinReal         DateTime?
  estado               EstadoTarea @default(pendiente)
  porcentajeCompletado Int         @default(0)
  horasEstimadas       Decimal?    @db.Decimal(10, 2)
  horasReales          Decimal?    @default(0) @db.Decimal(10, 2)

  // üîó Relaci√≥n con tarea padre
  tareaId String
  tarea   Tarea  @relation(fields: [tareaId], references: [id], onDelete: Cascade)

  // üë§ Usuario asignado
  asignadoId String?
  asignado   User?   @relation("SubtareaAsignado", fields: [asignadoId], references: [id], onDelete: SetNull)

  // üìä Registros de progreso
  registrosProgreso RegistroProgreso[]

  // üìÖ Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subtareas")
}

// üîó Modelo de Dependencias entre Tareas
model DependenciaTarea {
  id   String          @id @default(cuid())
  tipo TipoDependencia @default(finish_to_start)

  // üîó Tarea origen (predecesora)
  tareaOrigenId String
  tareaOrigen   Tarea  @relation("TareaOrigen", fields: [tareaOrigenId], references: [id], onDelete: Cascade)

  // üîó Tarea dependiente (sucesora)
  tareaDependienteId String
  tareaDependiente   Tarea  @relation("TareaDependiente", fields: [tareaDependienteId], references: [id], onDelete: Cascade)

  // üìÖ Timestamps
  createdAt DateTime @default(now())

  @@unique([tareaOrigenId, tareaDependienteId])
  @@map("dependencias_tarea")
}

// üë• Modelo de Asignaci√≥n de Recursos
model AsignacionRecurso {
  id             String   @id @default(cuid())
  rol            String // Rol espec√≠fico en la tarea
  horasAsignadas Decimal? @db.Decimal(10, 2)

  // üîó Relaci√≥n con tarea
  tareaId String
  tarea   Tarea  @relation(fields: [tareaId], references: [id], onDelete: Cascade)

  // üë§ Usuario asignado
  usuarioId String
  usuario   User   @relation("AsignacionRecurso", fields: [usuarioId], references: [id], onDelete: Cascade)

  // üìÖ Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tareaId, usuarioId])
  @@map("asignaciones_recurso")
}

// üìä Modelo de Registro de Progreso
model RegistroProgreso {
  id                   String   @id @default(cuid())
  fecha                DateTime @default(now())
  horasTrabajadas      Decimal  @db.Decimal(10, 2)
  descripcion          String?
  porcentajeCompletado Int?

  // üîó Relaci√≥n con tarea (opcional)
  tareaId String?
  tarea   Tarea?  @relation(fields: [tareaId], references: [id], onDelete: Cascade)

  // üîó Relaci√≥n con subtarea (opcional)
  subtareaId String?
  subtarea   Subtarea? @relation(fields: [subtareaId], references: [id], onDelete: Cascade)

  // üë§ Usuario que registra
  usuarioId String
  usuario   User   @relation("RegistroProgreso", fields: [usuarioId], references: [id], onDelete: Cascade)

  // üìÖ Timestamps
  createdAt DateTime @default(now())

  @@map("registros_progreso")
}

// ‚úÖ Nuevos modelos para exclusiones y condiciones de cotizaci√≥n
model CotizacionExclusion {
  id           String   @id @default(cuid())
  cotizacionId String
  descripcion  String
  orden        Int?     @default(0) // Para ordenar las exclusiones
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  cotizacion Cotizacion @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)

  @@index([cotizacionId, orden])
  @@map("cotizacion_exclusion")
}

model CotizacionCondicion {
  id           String   @id @default(cuid())
  cotizacionId String
  tipo         String? // ej. "comercial", "t√©cnica", "legal"
  descripcion  String
  orden        Int?     @default(0) // Para ordenar las condiciones
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  cotizacion Cotizacion @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)

  @@index([cotizacionId, orden])
  @@map("cotizacion_condicion")
}

// üß© Sistema de Plantillas para Exclusiones y Condiciones
model PlantillaExclusion {
  id          String   @id @default(cuid())
  nombre      String // Nombre descriptivo de la plantilla
  descripcion String? // Descripci√≥n opcional
  categoria   String? // ej. "general", "industrial", "comercial"
  activo      Boolean  @default(true)
  orden       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  items PlantillaExclusionItem[]

  @@index([categoria, activo])
  @@map("plantilla_exclusion")
}

model PlantillaExclusionItem {
  id                   String   @id @default(cuid())
  plantillaExclusionId String
  descripcion          String
  orden                Int      @default(0)
  activo               Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  plantillaExclusion PlantillaExclusion @relation(fields: [plantillaExclusionId], references: [id], onDelete: Cascade)

  @@index([plantillaExclusionId, orden])
  @@map("plantilla_exclusion_item")
}

model PlantillaCondicion {
  id          String   @id @default(cuid())
  nombre      String // Nombre descriptivo de la plantilla
  descripcion String? // Descripci√≥n opcional
  categoria   String? // ej. "general", "industrial", "comercial"
  tipo        String? // ej. "comercial", "t√©cnica", "legal"
  activo      Boolean  @default(true)
  orden       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  items PlantillaCondicionItem[]

  @@index([categoria, tipo, activo])
  @@map("plantilla_condicion")
}

model PlantillaCondicionItem {
  id                   String   @id @default(cuid())
  plantillaCondicionId String
  descripcion          String
  tipo                 String? // ej. "comercial", "t√©cnica", "legal"
  orden                Int      @default(0)
  activo               Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  plantillaCondicion PlantillaCondicion @relation(fields: [plantillaCondicionId], references: [id], onDelete: Cascade)

  @@index([plantillaCondicionId, orden])
  @@map("plantilla_condicion_item")
}

// ===================================================
// üÜï MODELOS CRM PARA PROYECTOS INDUSTRIALES
// ===================================================

// üìã Gesti√≥n de Oportunidades
model CrmOportunidad {
  id                  String            @id @default(cuid())
  clienteId           String
  nombre              String
  descripcion         String?
  valorEstimado       Float?
  probabilidad        Int               @default(0) // 0-100
  fechaCierreEstimada DateTime?
  fuente              String? // "licitaci√≥n", "referido", "prospecci√≥n"
  estado              EstadoOportunidad @default(prospecto) // Estado del ciclo de vida de la oportunidad
  prioridad           String            @default("media")
  comercialId         String?
  responsableId       String?
  fechaUltimoContacto DateTime?
  notas               String?
  competencia         String? // Competidores identificados
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relaciones
  cliente      Cliente        @relation(fields: [clienteId], references: [id])
  comercial    User?          @relation("CrmOportunidadComercial", fields: [comercialId], references: [id])
  responsable  User?          @relation("CrmOportunidadResponsable", fields: [responsableId], references: [id])
  cotizacionId String?        @unique
  cotizacion   Cotizacion?    @relation(fields: [cotizacionId], references: [id])
  proyectoId   String?
  proyecto     Proyecto?      @relation(fields: [proyectoId], references: [id])
  actividades  CrmActividad[]

  @@index([clienteId, estado])
  @@index([comercialId, fechaCierreEstimada])
  @@map("crm_oportunidad")
}

// üìû Seguimiento de Actividades
model CrmActividad {
  id            String   @id @default(cuid())
  oportunidadId String
  tipo          String // "llamada", "email", "reuni√≥n", "propuesta", "seguimiento"
  descripcion   String
  fecha         DateTime
  resultado     String? // "positivo", "neutro", "negativo"
  notas         String?
  usuarioId     String
  usuario       User     @relation(fields: [usuarioId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  oportunidad CrmOportunidad @relation(fields: [oportunidadId], references: [id], onDelete: Cascade)

  @@index([oportunidadId, fecha])
  @@map("crm_actividad")
}

// üè≠ An√°lisis de Competidores en Licitaciones
model CrmCompetidorLicitacion {
  id                 String   @id @default(cuid())
  cotizacionId       String
  nombreEmpresa      String
  contacto           String?
  telefono           String?
  email              String?
  propuestaEconomica Float?
  propuestaTecnica   String? // "muy_buena", "buena", "regular", "deficiente"
  fortalezas         String?
  debilidades        String?
  precioVsNuestro    String? // "mas_caro", "igual", "mas_barato"
  resultado          String? // "ganamos", "perdimos", "pendiente"
  razonPerdida       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  cotizacion Cotizacion @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)

  @@index([cotizacionId])
  @@map("crm_competidor_licitacion")
}

// üë• Gesti√≥n de Contactos por Cliente
model CrmContactoCliente {
  id                  String    @id @default(cuid())
  clienteId           String
  nombre              String
  cargo               String?
  email               String?
  telefono            String?
  celular             String?
  esDecisionMaker     Boolean   @default(false)
  areasInfluencia     String? // "t√©cnica", "comercial", "financiera"
  relacionComercial   String? // "muy_buena", "buena", "regular", "mala"
  fechaUltimoContacto DateTime?
  notas               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  cliente Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)

  @@index([clienteId, esDecisionMaker])
  @@map("crm_contacto_cliente")
}

// üìä Historial de Proyectos por Cliente
model CrmHistorialProyecto {
  id                  String    @id @default(cuid())
  clienteId           String
  proyectoId          String?
  cotizacionId        String?
  nombreProyecto      String
  tipoProyecto        String // "instalaci√≥n", "mantenimiento", "modernizaci√≥n", "nuevo"
  sector              String? // "miner√≠a", "manufactura", "energ√≠a", "otros"
  complejidad         String? // "baja", "media", "alta", "muy_alta"
  valorContrato       Float?
  margenObtenido      Float?
  duracionDias        Int?
  fechaInicio         DateTime?
  fechaFin            DateTime?
  fechaAdjudicacion   DateTime?
  calificacionCliente Int? // 1-5
  retroalimentacion   String?
  exitos              String?
  problemas           String?
  recomendaciones     String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  cliente    Cliente     @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  proyecto   Proyecto?   @relation(fields: [proyectoId], references: [id])
  cotizacion Cotizacion? @relation(fields: [cotizacionId], references: [id])

  @@index([clienteId, fechaInicio])
  @@index([tipoProyecto, sector])
  @@map("crm_historial_proyecto")
}

// üìà M√©tricas Comerciales por Usuario
model CrmMetricaComercial {
  id                    String   @id @default(cuid())
  usuarioId             String
  periodo               String // "2024-09", "2024-Q3", "2024"
  cotizacionesGeneradas Int      @default(0)
  cotizacionesAprobadas Int      @default(0)
  proyectosCerrados     Int      @default(0)
  valorTotalVendido     Float    @default(0)
  margenTotalObtenido   Float    @default(0)
  tiempoPromedioCierre  Float? // d√≠as
  tasaConversion        Float? // porcentaje
  valorPromedioProyecto Float?
  llamadasRealizadas    Int      @default(0)
  reunionesAgendadas    Int      @default(0)
  propuestasEnviadas    Int      @default(0)
  emailsEnviados        Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  usuario User @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, periodo])
  @@index([periodo])
  @@map("crm_metrica_comercial")
}

// üìä Historial de M√©tricas Detalladas (para reportes avanzados)
model MetricaComercial {
  id                    String   @id @default(cuid())
  usuarioId             String
  periodo               String // "2024-09", "2024-Q3", "2024"
  tipo                  String // "mensual", "trimestral", "anual"
  cotizacionesGeneradas Int      @default(0)
  cotizacionesAprobadas Int      @default(0)
  proyectosCerrados     Int      @default(0)
  valorTotalVendido     Float    @default(0)
  margenTotalObtenido   Float    @default(0)
  tiempoPromedioCierre  Float? // d√≠as
  tasaConversion        Float? // porcentaje
  valorPromedioProyecto Float?
  llamadasRealizadas    Int      @default(0)
  reunionesAgendadas    Int      @default(0)
  propuestasEnviadas    Int      @default(0)
  emailsEnviados        Int      @default(0)
  oportunidadesCreadas  Int      @default(0)
  oportunidadesGanadas  Int      @default(0)
  oportunidadesPerdidas Int      @default(0)
  actividadesRealizadas Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  usuario User @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, periodo, tipo])
  @@index([periodo, tipo])
  @@index([usuarioId, tipo])
  @@map("metrica_comercial")
}

// ===================================================
// üÜï SISTEMA DE VERSIONES PARA COTIZACIONES
// ===================================================

model CotizacionVersion {
  id           String  @id @default(cuid())
  cotizacionId String
  version      Int // N√∫mero de versi√≥n (1, 2, 3...)
  nombre       String // Nombre de la versi√≥n (ej: "Versi√≥n inicial", "Actualizaci√≥n precios")
  descripcion  String? // Descripci√≥n de los cambios
  estado       String  @default("borrador") // borrador, enviada, aprobada, rechazada

  // Snapshot completo de la cotizaci√≥n en JSON
  snapshot String // JSON con todos los datos de la cotizaci√≥n

  // Metadatos de la versi√≥n
  cambios      String? // Lista de cambios realizados
  motivoCambio String? // Raz√≥n del cambio (actualizaci√≥n precios, cambios t√©cnicos, etc.)
  usuarioId    String // Usuario que cre√≥ la versi√≥n

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  cotizacion Cotizacion @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  usuario    User       @relation(fields: [usuarioId], references: [id])

  @@unique([cotizacionId, version])
  @@index([cotizacionId, version])
  @@index([estado, createdAt])
  @@map("cotizacion_version")
}

// ===================================================
// üîî SISTEMA DE NOTIFICACIONES AUTOM√ÅTICAS
// ===================================================

model Notificacion {
  id        String                @id @default(cuid())
  titulo    String // T√≠tulo de la notificaci√≥n
  mensaje   String // Mensaje detallado
  tipo      TipoNotificacion      @default(info) // info, warning, success, error
  prioridad PrioridadNotificacion @default(media) // baja, media, alta, critica

  // Usuario destinatario
  usuarioId String
  usuario   User   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  // Contexto de la notificaci√≥n
  entidadTipo String? // "proyecto", "lista", "pedido", "cotizacion"
  entidadId   String? // ID de la entidad relacionada

  // Estado de la notificaci√≥n
  leida        Boolean   @default(false)
  fechaLectura DateTime?

  // Acci√≥n sugerida
  accionUrl   String? // URL para redireccionar al hacer clic
  accionTexto String? // Texto del bot√≥n de acci√≥n

  // Auditor√≠a
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([usuarioId, leida, createdAt(sort: Desc)])
  @@index([entidadTipo, entidadId])
  @@map("notificaciones")
}

// Enums para notificaciones
enum TipoNotificacion {
  info
  warning
  success
  error
}

enum PrioridadNotificacion {
  baja
  media
  alta
  critica
}

// ===================================================
// üìä SISTEMA DE AUDITOR√çA E HISTORIAL
// ===================================================

model AuditLog {
  id          String @id @default(cuid())
  entidadTipo String // 'LISTA_EQUIPO', 'PEDIDO_EQUIPO', 'PROYECTO', 'COTIZACION', 'OPORTUNIDAD'
  entidadId   String // ID de la entidad afectada
  accion      String // 'CREAR', 'ACTUALIZAR', 'ELIMINAR', 'CAMBIAR_ESTADO', etc.
  usuarioId   String // Usuario que realiz√≥ la acci√≥n
  descripcion String // Descripci√≥n legible de la acci√≥n

  // Cambios realizados (JSON)
  cambios String? // JSON con { campo: { anterior: valor, nuevo: valor } }

  // Metadatos adicionales
  metadata String? // JSON con informaci√≥n adicional del contexto

  // Auditor√≠a
  createdAt DateTime @default(now())

  // Relaci√≥n con usuario
  usuario User @relation(fields: [usuarioId], references: [id])

  @@index([entidadTipo, entidadId, createdAt(sort: Desc)])
  @@index([usuarioId, createdAt(sort: Desc)])
  @@index([accion, createdAt(sort: Desc)])
  @@map("audit_log")
}

// ===================================================
// üÜï SISTEMA DE IMPORTACI√ìN FLEXIBLE DE PLANTILLAS
// ===================================================

enum PlantillaTipo {
  completa // Plantilla con equipos, servicios y gastos
  equipos // Solo plantillas de equipos
  servicios // Solo plantillas de servicios
  gastos // Solo plantillas de gastos
}

model CotizacionPlantillaImport {
  id               String   @id @default(cuid())
  cotizacionId     String
  plantillaId      String
  tipoImportacion  String // 'equipos' | 'servicios' | 'gastos'
  fechaImportacion DateTime @default(now())
  usuarioId        String

  // Relaciones
  cotizacion Cotizacion @relation(fields: [cotizacionId], references: [id], onDelete: Cascade)
  plantilla  Plantilla  @relation(fields: [plantillaId], references: [id], onDelete: Cascade)
  usuario    User       @relation(fields: [usuarioId], references: [id])

  // √çndices para optimizaci√≥n
  @@index([cotizacionId, fechaImportacion])
  @@index([plantillaId, tipoImportacion])
  @@map("cotizacion_plantilla_import")
}

// ===================================================
// üìã SISTEMA DE PERMISOS GRANULARES
// ===================================================

model Permission {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String?
  resource           String
  action             String
  isSystemPermission Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relaciones
  userPermissions UserPermission[]

  @@index([resource, action])
  @@map("permissions")
}

model UserPermission {
  id           String   @id @default(cuid())
  userId       String
  permissionId String
  type         String // 'grant' | 'deny'
  createdBy    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@map("user_permissions")
}

// ===================================================
// üÜï SISTEMA DE ANALYTICS Y MONITOREO
// ===================================================

model AnalyticsEvent {
  id          String   @id @default(cuid())
  event       String
  category    String
  action      String
  label       String?
  value       Float?
  metadata    Json?
  timestamp   DateTime @default(now())
  userId      String?
  sessionId   String
  userAgent   String
  url         String

  // Indexes for performance
  @@index([category, event, timestamp(sort: Desc)])
  @@index([sessionId, timestamp(sort: Desc)])
  @@index([userId, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@map("analytics_events")
}

// Enums de aprovisionamiento eliminados
