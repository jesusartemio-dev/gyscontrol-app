// ===================================================
// üìÅ Archivo: proyectoEquipo.ts
// üìå Ubicaci√≥n: src/lib/services
// üîß Descripci√≥n: Servicios para ProyectoEquipo (grupos t√©cnicos) e √≠tems
// ===================================================

import type { ProyectoEquipoCotizado, ProyectoEquipoCotizadoItem } from '@/types'
import { buildApiUrl } from '@/lib/utils'

const BASE_URL = '/api/proyecto-equipo'
const ITEM_URL = '/api/proyecto-equipo-item'

// ‚úÖ Obtener grupos de equipos por proyecto (secciones t√©cnicas)
export async function getProyectoEquipos(proyectoId: string): Promise<ProyectoEquipoCotizado[]> {
  try {
    const url = buildApiUrl(`${BASE_URL}/from-proyecto/${proyectoId}`)
    console.log('üöÄ Llamando a URL:', url) // üëà NUEVO LOG
    const res = await fetch(url, { cache: 'no-store' })
    if (!res.ok) throw new Error('Error al obtener grupos de equipos')
    return await res.json()
  } catch (error) {
    console.error('‚ùå getProyectoEquipos:', error)
    return []
  }
}


// ‚úÖ Obtener un grupo de equipo por ID
export async function getProyectoEquipoById(equipoId: string): Promise<ProyectoEquipoCotizado | null> {
  try {
    const url = buildApiUrl(`${BASE_URL}/${equipoId}`)
    console.log('üöÄ Llamando a URL:', url) // üëà NUEVO LOG
    const res = await fetch(url, { cache: 'no-store' })
    if (!res.ok) throw new Error('Error al obtener grupo de equipo')
    return await res.json()
  } catch (error) {
    console.error('‚ùå getProyectoEquipoById:', error)
    return null
  }
}

// ‚úÖ Obtener todos los √≠tems de equipos del proyecto
export async function getProyectoEquipoItems(proyectoId: string): Promise<ProyectoEquipoCotizadoItem[]> {
  try {
    const res = await fetch(`${ITEM_URL}?proyectoId=${proyectoId}`)
    if (!res.ok) throw new Error('Error al obtener √≠tems de equipos del proyecto')
    return await res.json()
  } catch (error) {
    console.error('‚ùå getProyectoEquipoItems:', error)
    return []
  }
}
