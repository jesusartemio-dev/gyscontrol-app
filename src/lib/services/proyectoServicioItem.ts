// üìå Ubicaci√≥n: src/lib/services
// üîß Descripci√≥n: Servicios para ProyectoServicioCotizadoItem (√≠tems de servicios)
// ===================================================

import type {
  ProyectoServicioCotizadoItem,
  ProyectoServicioCotizadoItemPayload,
  ProyectoServicioCotizadoItemUpdatePayload,
} from '@/types'

// ‚úÖ Obtener √≠tems de servicios del proyecto, con opci√≥n de filtrar solo disponibles
export async function getProyectoServicioItems(
  proyectoId: string,
  soloDisponibles: boolean = false
): Promise<ProyectoServicioCotizadoItem[]> {
  try {
    const url = soloDisponibles
      ? `/api/proyecto-servicio-item/disponibles/proyecto/${proyectoId}`
      : `/api/proyecto-servicio-item/from-proyecto/${proyectoId}`

    const response = await fetch(url)
    if (!response.ok) throw new Error('Error al obtener √≠tems de servicios')
    return response.json()
  } catch (error) {
    console.error('‚ùå getProyectoServicioItems:', error)
    return []
  }
}

// üîÅ Alias por compatibilidad: obtiene √≠tems sin registro de horas asignado
export async function getProyectoServicioItemsDisponibles(proyectoId: string): Promise<ProyectoServicioCotizadoItem[]> {
  return getProyectoServicioItems(proyectoId, true)
}

// ‚úÖ Obtener un √≠tem por ID
export async function getProyectoServicioItemById(id: string): Promise<ProyectoServicioCotizadoItem | null> {
  try {
    const response = await fetch(`/api/proyecto-servicio-item/${id}`)
    if (!response.ok) throw new Error('Error al obtener √≠tem de servicio')
    return response.json()
  } catch (error) {
    console.error('‚ùå getProyectoServicioItemById:', error)
    return null
  }
}

// ‚úÖ Crear √≠tem (puede derivarse de un √≠tem anterior mediante listaServicioSeleccionadoId)
export async function createProyectoServicioItem(
  data: ProyectoServicioCotizadoItemPayload
): Promise<ProyectoServicioCotizadoItem> {
  try {
    const response = await fetch('/api/proyecto-servicio-item', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    })
    if (!response.ok) throw new Error('Error al crear √≠tem de servicio')
    return response.json()
  } catch (error) {
    console.error('‚ùå createProyectoServicioItem:', error)
    throw error
  }
}

// ‚úÖ Actualizar √≠tem (incluye campo listaServicioSeleccionadoId para trazabilidad)
export async function updateProyectoServicioItem(
  id: string,
  data: ProyectoServicioCotizadoItemUpdatePayload
): Promise<ProyectoServicioCotizadoItem> {
  try {
    const response = await fetch(`/api/proyecto-servicio-item/${id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    })
    if (!response.ok) throw new Error('Error al actualizar √≠tem de servicio')
    return response.json()
  } catch (error) {
    console.error('‚ùå updateProyectoServicioItem:', error)
    throw error
  }
}

// ‚úÖ Eliminar √≠tem
export async function deleteProyectoServicioItem(id: string): Promise<void> {
  try {
    const response = await fetch(`/api/proyecto-servicio-item/${id}`, {
      method: 'DELETE'
    })
    if (!response.ok) throw new Error('Error al eliminar √≠tem de servicio')
  } catch (error) {
    console.error('‚ùå deleteProyectoServicioItem:', error)
    throw error
  }
}